name: Build
run-name: >
  Build
  ${{ inputs.alpine_tag && format('tag={0}', inputs.alpine_tag) || '' }}
  ${{ inputs.push && format('push={0}', inputs.push) || '' }}
  ${{ inputs.refresh && format('refresh={0}', inputs.refresh) || '' }}

on:
  workflow_call:
    inputs:
      alpine_tag:
        default: latest
        type: string
      push:
        default: false
        type: boolean
      refresh:
        default: false
        type: boolean
  workflow_dispatch:
    inputs:
      alpine_tag:
        description: alpine image tag
        type: string
        default: latest
      push:
        description: push to registry
        type: boolean
        default: false
      refresh:
        description: force image refresh
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ${{ vars.DOCKER_REGISTRY != '' && vars.DOCKER_REGISTRY || 'ghcr.io' }}
  REGISTRY_USERNAME: ${{ vars.DOCKER_USERNAME != '' && vars.DOCKER_USERNAME || github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.DOCKER_PASSWORD != '' && secrets.DOCKER_PASSWORD || secrets.GITHUB_TOKEN }}
  REPOSITORY: ${{ vars.DOCKER_REPOSITORY != '' && vars.DOCKER_REPOSITORY || github.repository }}

jobs:
  build:
    timeout-minutes: 10
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    steps:
      - name: Login to ${{ env.REGISTRY }}
        if: inputs.push == true
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Pull image
        run: |
          FROM_IMAGE="docker.io/alpine:${{ inputs.alpine_tag }}"
          VERSION_ID=$(docker run --rm ${FROM_IMAGE} sh -c 'source /etc/os-release ; echo $VERSION_ID')
          echo "VERSION_ID=${VERSION_ID}" >> $GITHUB_ENV
          echo "BASE_ID=$(docker images -q ${FROM_IMAGE})" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${VERSION_ID}" >> $GITHUB_ENV

      - name: Pull and compare ${{ env.VERSION_ID }} image
        if: inputs.refresh == false
        id: compare_image
        run: |
          if docker pull ${{ env.IMAGE_TAG }} ; then
            IMAGE_BASE_ID=$(docker inspect ${{ env.IMAGE_TAG }} --format "{{ index .Config.Labels \"base_image\"}}" || true)
            if [[ "${IMAGE_BASE_ID}" == "${{ env.BASE_ID }}" ]] ; then
              echo "no updates to base image since last build, aborting"
              exit 0
            fi
            echo "::notice title=::rebuilding, base image_id does not match"
          else
            echo "::notice title=::building, image not found in registry"
          fi
          echo "need_refresh=true" >> $GITHUB_OUTPUT

      - name: Setup Containerd image store
        if: steps.compare_image.outputs.need_refresh || steps.compare_image.outcome == 'skipped'
        uses: crazy-max/ghaction-setup-docker@v2
        with:
          version: v24.0.6
          daemon-config: '{ "features": { "containerd-snapshotter": true } }'

      - name: Setup QEMU
        if: steps.compare_image.outputs.need_refresh || steps.compare_image.outcome == 'skipped'
        uses: docker/setup-buildx-action@v3

      - name: Setup Docker Buildx
        if: steps.compare_image.outputs.need_refresh || steps.compare_image.outcome == 'skipped'
        uses: docker/setup-buildx-action@v3
        
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Build ${{ env.VERSION_ID }}
        if: steps.compare_image.outputs.need_refresh || steps.compare_image.outcome == 'skipped'
        id: build_image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          labels: base_image=${{ env.BASE_ID }}
          load: true
          push: false
          tags: ${{ env.IMAGE_TAG }}
          provenance: ${{ contains(env.REGISTRY, 'docker') }}
          platforms: linux/amd64,linux/arm64/v8
          build-args: |
            alpine_tag=${{ env.VERSION_ID }}

      - name: Push ${{ env.VERSION_ID }} to ${{ env.REGISTRY }}/${{ env.REPOSITORY }}
        if: steps.build_image.outcome == 'success' && needs.select.outputs.push == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          labels: base_image=${{ env.BASE_ID }}
          push: true
          tags: ${{ env.IMAGE_TAG }}
          provenance: ${{ contains(env.REGISTRY, 'docker') }}
          platforms: linux/amd64,linux/arm64/v8
          build-args: |
            alpine_tag=${{ env.VERSION_ID }}
